(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./map.js');

app();


},{"./map.js":2}],2:[function(require,module,exports){
"use strict";

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: "Panels",

      getInitialState: function getInitialState() {
        return {
          provinces: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.getJSON('assets/data/china_provinces_etymology.json', (function (data) {
          var provinces = data;

          console.log(1);

          if (this.isMounted()) {
            this.setState({
              provinces: provinces
            });
          }
        }).bind(this)); // end getJSON
      },

      render: function render() {
        return React.createElement(
          "div",
          { className: "panels" },
          React.createElement(
            "ul",
            { className: "panels__container" },
            this.state.provinces.map(function (province) {
              return React.createElement(
                "li",
                { className: "panels__item", itemID: province.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  "h3",
                  null,
                  province.name
                )
              );
            }) // end provinces

          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1Ijoib3p5d29vbGVlIiwiYSI6ImNpaDcwdTJ2bzBld2p1bWtpeG1lYTltaGcifQ.Ocpge8p64YCB1utqFOYtog';

    var Map = React.createClass({
      displayName: "Map",

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'ozywoolee.87aae22b', {
          zoomControl: false,
          attributionControl: false
        });
        map.scrollWheelZoom.disable();

        var credits = L.control.attribution().addTo(map);
        credits.addAttribution("© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap contributors</a>");
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);

        var thisMap = this.map;

        $.getJSON('assets/data/china_provinces_polygon.json', function (data) {

          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {

            var content = 'test';

            layer.bindPopup(content);

            layer.on('click', function (e) {

              var provinceName = $(this)[0].feature.properties.NAME.toLowerCase().replace(/ /g, '');
              console.log(provinceName);

              // pan to polygon

              thisMap.setView(layer.getBounds().getCenter(), 5);
            }); // end layer click event
          }); // end eachLayer

          // Grab labels for each province form json and center them in the province polygon derived from coordinates
          L.geoJson(data, {
            onEachFeature: function onEachFeature(feature, layer) {
              var label = L.marker(layer.getBounds().getCenter(), {
                icon: L.divIcon({
                  className: 'label label-' + layer.feature.properties.NAME.toLowerCase().replace(/ /g, ''),
                  html: layer.feature.properties.NAME,
                  iconSize: [100, 40]
                })
              }).addTo(thisMap);
            }
          });

          // Hide province labels when zoomed out too far
          thisMap.on('zoomend', function () {
            console.log(thisMap.getZoom());
            if (thisMap.getZoom() <= 4) {
              $('.label').css('display', 'none');
            }
            if (thisMap.getZoom() === 5) {
              $('.label').css('display', 'block');
            }
          });
        }); // end getJSON
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      render: function render() {
        return React.createElement("div", { className: "map" });
      }

    });

    /*
     * Container
     */
    var Container = React.createClass({
      displayName: "Container",

      render: function render() {
        return React.createElement(
          "div",
          { className: "container" },
          React.createElement(Map, { lat: "35", lon: "105", zoom: "5" }),
          React.createElement(Panels, null)
        );
      }
    });

    // Render the React component
    React.render(React.createElement(Container, null), document.getElementById('mount'));
  }; // end module export
})(); // end anonymous wrapper


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
