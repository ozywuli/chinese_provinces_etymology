(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./map.js');

app();


},{"./map.js":2}],2:[function(require,module,exports){
'use strict';

(function () {

  module.exports = function () {

    var toggled = false;
    var $infoToggle = $('.info-toggle');
    var $infoPanel = $('.info-panel');
    var $pulse = $('.pulse');

    $infoToggle.on('click', '.pulse', function (e) {

      e.preventDefault();
      if (!$infoPanel.hasClass('active')) {
        $infoPanel.addClass('active');

        var pulse = $pulse.clone().removeClass('pulsate');
        $(this).remove();
        $infoToggle.append(pulse);
        pulse.addClass('pulsate');
      } else {

        var pulse = $pulse.clone().removeClass('pulsate');
        $(this).remove();
        $infoToggle.append(pulse);
        pulse.addClass('pulsate');

        $infoPanel.removeClass('active');
      }
    });

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: 'Panels',

      getInitialState: function getInitialState() {
        return {
          provinces: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.getJSON('assets/data/china_provinces_etymology.json', (function (data) {
          var provinces = data;
          if (this.isMounted()) {
            this.setState({
              provinces: provinces
            });
          }
        }).bind(this)); // end getJSON
      },

      render: function render() {
        return React.createElement(
          'div',
          { className: 'panels' },
          React.createElement(
            'ul',
            { className: 'panels__container' },
            this.state.provinces.map(function (province) {
              return React.createElement(
                'li',
                { className: 'panels__item', itemID: province.name.toLowerCase().replace(/['\s]/g, '') },
                React.createElement(
                  'h3',
                  null,
                  province.name
                ),
                React.createElement(
                  'div',
                  { className: 'panels__row' },
                  React.createElement(
                    'div',
                    { className: 'panels__cell' },
                    'Simplified Chinese'
                  ),
                  React.createElement(
                    'div',
                    { className: 'panels__cell' },
                    province.name_ch
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'panels__row' },
                  React.createElement(
                    'div',
                    { className: 'panels__cell' },
                    'Pinyin'
                  ),
                  React.createElement(
                    'div',
                    { className: 'panels__cell' },
                    province.pinyin
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'panels__row' },
                  React.createElement(
                    'div',
                    { className: 'panels__cell' },
                    'Literal Meaning'
                  ),
                  React.createElement(
                    'div',
                    { className: 'panels__cell panels__lit' },
                    province.lit
                  )
                ),
                React.createElement(
                  'div',
                  { className: 'panels__row' },
                  province.description
                )
              );
            }) // end provinces

          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1Ijoib3p5d29vbGVlIiwiYSI6ImNpaDcwdTJ2bzBld2p1bWtpeG1lYTltaGcifQ.Ocpge8p64YCB1utqFOYtog';

    var Map = React.createClass({
      displayName: 'Map',

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'ozywoolee.87aae22b', {
          zoomControl: false,
          attributionControl: false
        });
        // map.scrollWheelZoom.disable();
        map.doubleClickZoom.disable();

        var credits = L.control.attribution().addTo(map);
        credits.addAttribution("© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap contributors</a>");
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);
        var thisMap = this.map;

        $.getJSON('assets/data/china_provinces_polygon.json', function (data) {

          // use the callback data to set the features layer
          myLayer.setGeoJSON(data);

          // loop through each layer from data callback
          myLayer.eachLayer(function (layer) {

            var allLayer = layer;

            // set all polygon color to yellow
            allLayer.setStyle({ fillColor: 'yellow' });

            var layerName = layer.feature.properties.NAME.toLowerCase().replace(/['\s]/g, '');

            // Grab labels for each province form json and center them in the province polygon derived from coordinates
            var label = L.marker(layer.getBounds().getCenter(), {
              icon: L.divIcon({
                className: 'label--name label label-' + layerName + ' ' + 'label--name-' + layerName,
                html: '<div class="label__text">' + layer.feature.properties.NAME + '</div>',
                iconSize: [100, 40]
              })
            }).addTo(thisMap);

            var litLabel = L.marker(layer.getBounds().getCenter(), {
              icon: L.divIcon({
                className: 'label label-' + layerName + ' ' + 'hidden label--lit label--lit-' + layerName,
                html: '<div class="label__text">' + layer.feature.properties.NAME + '</div>',
                iconSize: [100, 40]
              })
            }).addTo(thisMap);

            layer.on('click', function (e) {

              var provinceName = $(this)[0].feature.properties.NAME.toLowerCase().replace(/['\s]/g, '');

              $('.label--lit-' + provinceName + ' ' + '.label__text').html($('[itemid="' + provinceName + '"] .panels__lit').html());

              if (toggled === false) {
                console.log(false);
                $('.label--lit').addClass('hidden');
                $('.label--name').removeClass('hidden');
                $('.label--name-' + provinceName).addClass('hidden');
                $('.label--lit-' + provinceName).removeClass('hidden');
              } else {
                console.log(true);
                $('.label--lit').removeClass('hidden');
                $('.label--name').addClass('hidden');
                $('.label--lit-' + provinceName).addClass('hidden');
                $('.label--name-' + provinceName).removeClass('hidden');
              }

              // reset all polygon colors to yellow
              myLayer.eachLayer(function (layer) {
                layer.setStyle({ fillColor: 'yellow' });
              });

              // set active polygon color to red
              $(this)[0].setStyle({ fillColor: 'red' });

              // set active class to corresponding panel
              $('.panels__item').removeClass('active');
              $('[itemid="' + provinceName + '"]').addClass('active');
              $('.label__text').removeClass('label__text--active');
              $('.label-' + provinceName + ' ' + '.label__text').addClass('label__text--active');

              // pan to polygon
              thisMap.setView(layer.getBounds().getCenter(), 5);
            }); // end layer click event
          }); // end eachLayer

          // Hide province labels when zoomed out too far
          thisMap.on('zoomend', function () {
            if (thisMap.getZoom() <= 4) {
              $('.label').css('display', 'none');
            }
            if (thisMap.getZoom() === 5) {
              $('.label').css('display', 'block');
            }
          });
        }); // end getJSON
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();

        $('.toggle').on('click', function (e) {
          e.preventDefault();

          if (toggled === false) {
            var store = [];

            $('.label--lit').each(function () {
              store.push($(this).html().toLowerCase().replace(/['\s]/g, ''));
            });

            for (var i = 0; i < store.length; i++) {
              $('.label--lit-' + store[i]).html($('[itemid="' + store[i] + '"] .panels__lit').html());
            }

            toggled = true;
          } else if (toggled === true) {
            toggled = false;
          }

          if (toggled === true) {
            console.log(false);
            $('.label--name').addClass('hidden');
            $('.label--lit').removeClass('hidden');
          } else if (toggled === false) {
            console.log(true);
            $('.label--name').removeClass('hidden');
            $('.label--lit').addClass('hidden');
          }
        });
      },

      render: function render() {
        return React.createElement('div', { className: 'map' });
      }

    });

    /*
     * Container
     */
    var Container = React.createClass({
      displayName: 'Container',

      render: function render() {
        return React.createElement(
          'div',
          { className: 'container' },
          React.createElement(Panels, null),
          React.createElement(Map, { lat: '35', lon: '105', zoom: '5' })
        );
      }
    });

    // Render the React component
    React.render(React.createElement(Container, null), document.getElementById('mount'));
  }; // end module export
})(); // end anonymous wrapper


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
