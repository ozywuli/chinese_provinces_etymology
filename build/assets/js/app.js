(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./map.js');

app();


},{"./map.js":2}],2:[function(require,module,exports){
"use strict";

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: "Panels",

      getInitialState: function getInitialState() {
        return {
          provinces: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.getJSON('assets/data/china_provinces_etymology.json', (function (data) {
          var provinces = data;

          if (this.isMounted()) {
            this.setState({
              provinces: provinces
            });
          }
        }).bind(this)); // end getJSON
      },

      render: function render() {
        return React.createElement(
          "div",
          { className: "panels" },
          React.createElement(
            "ul",
            { className: "panels__container" },
            this.state.provinces.map(function (province) {
              return React.createElement(
                "li",
                { className: "panels__item", itemID: province.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  "h3",
                  null,
                  province.name
                )
              );
            }) // end provinces

          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1IjoiYW9zaWthIiwiYSI6IjQzRGIxeEkifQ.7OvmyBbXwwt9Qxjlh9Qd3w';

    var Map = React.createClass({
      displayName: "Map",

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'mapbox.streets', {
          zoomControl: false,
          attributionControl: false
        });
        map.scrollWheelZoom.disable();

        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        new L.Control.Zoom({ position: 'bottomright' }).addTo(this.map);

        var credits = L.control.attribution().addTo(this.map);
        credits.addAttribution("© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap contributors</a>");

        var myLayer = L.mapbox.featureLayer().addTo(this.map);

        var thisMap = this.map;
        var thisData;

        $.getJSON('assets/data/china_provinces_polygon.json', function (data) {

          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {
            layer.on('click', function (e) {
              var provinceName = $(this)[0].feature.properties.NAME.toLowerCase().replace(/ /g, '');

              console.log(provinceName);
            }); // end layer click event
          }); // end eachLayer

          console.log(data);

          thisData = data;
        }); // end getJSON
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      render: function render() {
        return React.createElement("div", { className: "map" });
      }

    });

    /*
     * Container
     */
    var Container = React.createClass({
      displayName: "Container",

      render: function render() {
        return React.createElement(
          "div",
          { className: "container" },
          React.createElement(Map, { lat: "35", lon: "100", zoom: "4" }),
          React.createElement(Panels, null)
        );
      }
    });

    // Render the React component
    React.render(React.createElement(Container, null), document.getElementById('mount'));
  }; // end module export
})(); // end anonymous wrapper


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNwZVxcc3JjXFxhc3NldHNcXGpzXFxhcHAuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNwZVxcc3JjXFxhc3NldHNcXGpzXFxtYXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUU5QixHQUFHLEVBQUUsQ0FBQztBQUNOOzs7QUNMQSxZQUFZLENBQUM7O0FBRWIsQ0FBQyxZQUFZOztBQUViLEVBQUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQy9CO0FBQ0E7QUFDQTs7SUFFSSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ25DLE1BQU0sV0FBVyxFQUFFLFFBQVE7O01BRXJCLGVBQWUsRUFBRSxTQUFTLGVBQWUsR0FBRztRQUMxQyxPQUFPO1VBQ0wsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0FBQ1YsT0FBTzs7TUFFRCxpQkFBaUIsRUFBRSxTQUFTLGlCQUFpQixHQUFHO1FBQzlDLENBQUMsQ0FBQyxPQUFPLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxVQUFVLElBQUksRUFBRTtBQUNqRixVQUFVLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQzs7VUFFckIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQztjQUNaLFNBQVMsRUFBRSxTQUFTO2FBQ3JCLENBQUMsQ0FBQztXQUNKO1NBQ0YsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN2QixPQUFPOztNQUVELE1BQU0sRUFBRSxTQUFTLE1BQU0sR0FBRztRQUN4QixPQUFPLEtBQUssQ0FBQyxhQUFhO1VBQ3hCLEtBQUs7VUFDTCxF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QUNMLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRTtVQUMxQixLQUFLLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7VUFDOUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1NBQ2xDLENBQUM7T0FDSDtBQUNQLEtBQUssQ0FBQyxDQUFDO0FBQ1A7O0lBRUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDdEYsQ0FBQztDQUNILEdBQUcsQ0FBQyxDQUFDLHdCQUF3QjtBQUM5QiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSByZXF1aXJlKCcuL21hcC5qcycpO1xuXG5hcHAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpjR1V2YzNKakwyRnpjMlYwY3k5cWN5OWhjSEF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN08wRkJSemxDTEVkQlFVY3NSVUZCUlN4RFFVRkRJaXdpWm1sc1pTSTZJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpjR1V2YzNKakwyRnpjMlYwY3k5cWN5OWhjSEF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWVhCd0lEMGdjbVZ4ZFdseVpTZ25MaTl0WVhBdWFuTW5LVHRjY2x4dVhISmNibHh5WEc1aGNIQW9LVHNpWFgwPSIsIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLypcclxuICAgICAqIFBhbmVsc1xyXG4gICAgICovXG4gICAgdmFyIFBhbmVscyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiBcIlBhbmVsc1wiLFxuXG4gICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcm92aW5jZXM6IFtdXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICQuZ2V0SlNPTignYXNzZXRzL2RhdGEvY2hpbmFfcHJvdmluY2VzX2V0eW1vbG9neS5qc29uJywgKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdmFyIHByb3ZpbmNlcyA9IGRhdGE7XG5cbiAgICAgICAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHByb3ZpbmNlczogcHJvdmluY2VzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmJpbmQodGhpcykpOyAvLyBlbmQgZ2V0SlNPTlxuICAgICAgfSxcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwicGFuZWxzXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicGFuZWxzX19jb250YWluZXJcIiB9LFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wcm92aW5jZXMubWFwKGZ1bmN0aW9uIChwcm92aW5jZSkge1xuICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IFwicGFuZWxzX19pdGVtXCIsIGl0ZW1JRDogcHJvdmluY2UubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgJycpIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgIFwiaDNcIixcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBwcm92aW5jZS5uYW1lXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSkgLy8gZW5kIHByb3ZpbmNlc1xuXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICAvKlxyXG4gICAgICogTWFwXHJcbiAgICAgKi9cbiAgICBMLm1hcGJveC5hY2Nlc3NUb2tlbiA9ICdway5leUoxSWpvaVlXOXphV3RoSWl3aVlTSTZJalF6UkdJeGVFa2lmUS43T3ZteUJiWHd3dDlReGpsaDlRZDN3JztcblxuICAgIHZhciBNYXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICBkaXNwbGF5TmFtZTogXCJNYXBcIixcblxuICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF5ZXJzOiAnJ1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgY3JlYXRlTWFwOiBmdW5jdGlvbiBjcmVhdGVNYXAoZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFwID0gTC5tYXBib3gubWFwKGVsZW1lbnQsICdtYXBib3guc3RyZWV0cycsIHtcbiAgICAgICAgICB6b29tQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgbWFwLnNjcm9sbFdoZWVsWm9vbS5kaXNhYmxlKCk7XG5cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH0sXG5cbiAgICAgIHNldHVwTWFwOiBmdW5jdGlvbiBzZXR1cE1hcCgpIHtcbiAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbdGhpcy5wcm9wcy5sYXQsIHRoaXMucHJvcHMubG9uXSwgdGhpcy5wcm9wcy56b29tKTtcbiAgICAgIH0sXG5cbiAgICAgIGNyZWF0ZUxheWVyczogZnVuY3Rpb24gY3JlYXRlTGF5ZXJzKCkge1xuXG4gICAgICAgIG5ldyBMLkNvbnRyb2wuWm9vbSh7IHBvc2l0aW9uOiAnYm90dG9tcmlnaHQnIH0pLmFkZFRvKHRoaXMubWFwKTtcblxuICAgICAgICB2YXIgY3JlZGl0cyA9IEwuY29udHJvbC5hdHRyaWJ1dGlvbigpLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgY3JlZGl0cy5hZGRBdHRyaWJ1dGlvbihcIsKpIDxhIGhyZWY9J2h0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwLWZlZWRiYWNrLyc+TWFwYm94PC9hPiDCqSA8YSBocmVmPSdodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodCc+T3BlblN0cmVldE1hcCBjb250cmlidXRvcnM8L2E+XCIpO1xuXG4gICAgICAgIHZhciBteUxheWVyID0gTC5tYXBib3guZmVhdHVyZUxheWVyKCkuYWRkVG8odGhpcy5tYXApO1xuXG4gICAgICAgIHZhciB0aGlzTWFwID0gdGhpcy5tYXA7XG4gICAgICAgIHZhciB0aGlzRGF0YTtcblxuICAgICAgICAkLmdldEpTT04oJ2Fzc2V0cy9kYXRhL2NoaW5hX3Byb3ZpbmNlc19wb2x5Z29uLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xuXG4gICAgICAgICAgbXlMYXllci5zZXRHZW9KU09OKGRhdGEpO1xuXG4gICAgICAgICAgbXlMYXllci5lYWNoTGF5ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICBsYXllci5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICB2YXIgcHJvdmluY2VOYW1lID0gJCh0aGlzKVswXS5mZWF0dXJlLnByb3BlcnRpZXMuTkFNRS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgJycpO1xuXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb3ZpbmNlTmFtZSk7XG4gICAgICAgICAgICB9KTsgLy8gZW5kIGxheWVyIGNsaWNrIGV2ZW50XG4gICAgICAgICAgfSk7IC8vIGVuZCBlYWNoTGF5ZXJcblxuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgICAgICAgdGhpc0RhdGEgPSBkYXRhO1xuICAgICAgICB9KTsgLy8gZW5kIGdldEpTT05cbiAgICAgIH0sXG5cbiAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY3JlYXRlTWFwKSB7XG4gICAgICAgICAgdGhpcy5tYXAgPSB0aGlzLnByb3BzLmNyZWF0ZU1hcCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXAgPSB0aGlzLmNyZWF0ZU1hcCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldHVwTWFwKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlTGF5ZXJzKCk7XG4gICAgICB9LFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibWFwXCIgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8qXHJcbiAgICAgKiBDb250YWluZXJcclxuICAgICAqL1xuICAgIHZhciBDb250YWluZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICBkaXNwbGF5TmFtZTogXCJDb250YWluZXJcIixcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29udGFpbmVyXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1hcCwgeyBsYXQ6IFwiMzVcIiwgbG9uOiBcIjEwMFwiLCB6b29tOiBcIjRcIiB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBhbmVscywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFJlbmRlciB0aGUgUmVhY3QgY29tcG9uZW50XG4gICAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdW50JykpO1xuICB9OyAvLyBlbmQgbW9kdWxlIGV4cG9ydFxufSkoKTsgLy8gZW5kIGFub255bW91cyB3cmFwcGVyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqY0dVdmMzSmpMMkZ6YzJWMGN5OXFjeTl0WVhBdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4RFFVRkRMRmxCUVZjN08wRkJSVm9zVVVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4WlFVRlhPenM3T3p0QlFVczFRaXhSUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPenM3UVVGRk4wSXNjVUpCUVdVc1JVRkJSU3d5UWtGQlZ6dEJRVU14UWl4bFFVRlBPMEZCUTB3c2JVSkJRVk1zUlVGQlJTeEZRVUZGTzFOQlEyUXNRMEZCUVR0UFFVTkdPenRCUVVWRUxIVkNRVUZwUWl4RlFVRkZMRFpDUVVGWE8wRkJRelZDTEZOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc05FTkJRVFJETEVWQlFVVXNRMEZCUVN4VlFVRlRMRWxCUVVrc1JVRkJSVHRCUVVOeVJTeGpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN08wRkJSWEpDTEdOQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hGUVVGRk8wRkJRM0JDTEdkQ1FVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRMW9zZFVKQlFWTXNSVUZCUlN4VFFVRlRPMkZCUTNKQ0xFTkJRVU1zUTBGQlFUdFhRVU5JTzFOQlEwWXNRMEZCUVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzA5QlEyWTdPMEZCUlVRc1dVRkJUU3hGUVVGRkxHdENRVUZYTzBGQlEycENMR1ZCUTBVN08xbEJRVXNzVTBGQlV5eEZRVUZETEZGQlFWRTdWVUZEY2tJN08yTkJRVWtzVTBGQlV5eEZRVUZETEcxQ1FVRnRRanRaUVVVM1FpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlV5eFJRVUZSTEVWQlFVVTdRVUZETVVNc2NVSkJRMFU3TzJ0Q1FVRkpMRk5CUVZNc1JVRkJReXhqUVVGakxFVkJRVU1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1FVRkJRenRuUWtGRGFrWTdPenRyUWtGRFJ5eFJRVUZSTEVOQlFVTXNTVUZCU1R0cFFrRkRXRHRsUVVOR0xFTkJRMDQ3WVVGRFJpeERRVUZET3p0WFFVVkVPMU5CUTBRc1EwRkRVRHRQUVVOR096dExRVVZHTEVOQlFVTXNRMEZCUXpzN096czdRVUZOU0N4TFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUjBGQlJ5eHJSVUZCYTBVc1EwRkJRenM3UVVGRk1VWXNVVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6czdPMEZCUlRGQ0xIRkNRVUZsTEVWQlFVVXNNa0pCUVZjN1FVRkRNVUlzWlVGQlR6dEJRVU5NTEdkQ1FVRk5MRVZCUVVVc1JVRkJSVHRUUVVOWUxFTkJRVUU3VDBGRFJqczdRVUZGUkN4bFFVRlRMRVZCUVVVc2JVSkJRVk1zVDBGQlR5eEZRVUZGTzBGQlF6TkNMRmxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3huUWtGQlowSXNSVUZCUlR0QlFVTm9SQ3h4UWtGQlZ5eEZRVUZGTEV0QlFVczdRVUZEYkVJc05FSkJRV3RDTEVWQlFVVXNTMEZCU3p0VFFVTXhRaXhEUVVGRExFTkJRVU03UVVGRFNDeFhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE96dEJRVWM1UWl4bFFVRlBMRWRCUVVjc1EwRkJRenRQUVVOYU96dEJRVVZFTEdOQlFWRXNSVUZCUlN4dlFrRkJWenRCUVVOdVFpeFpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU55UlRzN1FVRkZSQ3hyUWtGQldTeEZRVUZGTEhkQ1FVRlhPenRCUVVWMlFpeFpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVU1zVVVGQlVTeEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXpzN1FVRkZMMFFzV1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1JFTEdWQlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc0swbEJRU3RKTEVOQlFVTXNRMEZCUXpzN1FVRkZlRXNzV1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVWQwUkN4WlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZCTzBGQlEzUkNMRmxCUVVrc1VVRkJVU3hEUVVGRE96dEJRVVZpTEZOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc01FTkJRVEJETEVWQlFVVXNWVUZCVXl4SlFVRkpMRVZCUVVVN08wRkJSVzVGTEdsQ1FVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3p0QlFVVjZRaXhwUWtGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlRMRXRCUVVzc1JVRkJSVHRCUVVOb1F5eHBRa0ZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlV5eERRVUZETEVWQlFVVTdRVUZETlVJc2EwSkJRVWtzV1VGQldTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVYwUml4eFFrRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0aFFVVXpRaXhEUVVGRExFTkJRVU03VjBGRFNpeERRVUZETEVOQlFVTTdPMEZCUlVnc2FVSkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSV3hDTEd0Q1FVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRE8xTkJSV3BDTEVOQlFVTXNRMEZCUXp0UFFVZEtPenRCUVVWRUxIVkNRVUZwUWl4RlFVRkZMRFpDUVVGWE8wRkJRelZDTEZsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGRGRFSXNZMEZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU4wUkN4TlFVRk5PMEZCUTBnc1kwRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEyaEVPenRCUVVWRUxGbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTm9RaXhaUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdUMEZGY2tJN08wRkJSVVFzV1VGQlRTeEZRVUZGTEd0Q1FVRlhPMEZCUTJwQ0xHVkJRMFVzTmtKQlFVc3NVMEZCVXl4RlFVRkRMRXRCUVVzc1IwRkJUeXhEUVVNMVFqdFBRVU5HT3p0TFFVVkdMRU5CUVVNc1EwRkJRenM3T3pzN1FVRk5TQ3hSUVVGSkxGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPenM3UVVGRGFFTXNXVUZCVFN4RlFVRkZMR3RDUVVGWE8wRkJRMnBDTEdWQlEwVTdPMWxCUVVzc1UwRkJVeXhGUVVGRExGZEJRVmM3VlVGRGVFSXNiMEpCUVVNc1IwRkJSeXhKUVVGRExFZEJRVWNzUlVGQlF5eEpRVUZKTEVWQlFVTXNSMEZCUnl4RlFVRkRMRXRCUVVzc1JVRkJReXhKUVVGSkxFVkJRVU1zUjBGQlJ5eEhRVUZGTzFWQlEyeERMRzlDUVVGRExFMUJRVTBzVDBGQlJ6dFRRVU5PTEVOQlExQTdUMEZEUmp0TFFVTkdMRU5CUVVNc1EwRkJRenM3TzBGQlNVZ3NVMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkRWaXh2UWtGQlF5eFRRVUZUTEU5QlFVY3NSVUZEWWl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVU5xUXl4RFFVRkJPMGRCUlVFc1EwRkJRVHREUVVOQkxFTkJRVUVzUlVGQlJ5eERRVUZCSWl3aVptbHNaU0k2SWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqY0dVdmMzSmpMMkZ6YzJWMGN5OXFjeTl0WVhBdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRvS1NCN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzVjY2x4dUx5cGNjbHh1SUNvZ1VHRnVaV3h6WEhKY2JpQXFMMXh5WEc1MllYSWdVR0Z1Wld4eklEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh5WEc1Y2NseHVJQ0JuWlhSSmJtbDBhV0ZzVTNSaGRHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnY0hKdmRtbHVZMlZ6T2lCYlhTeGNjbHh1SUNBZ0lIMWNjbHh1SUNCOUxGeHlYRzVjY2x4dUlDQmpiMjF3YjI1bGJuUkVhV1JOYjNWdWREb2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FrTG1kbGRFcFRUMDRvSjJGemMyVjBjeTlrWVhSaEwyTm9hVzVoWDNCeWIzWnBibU5sYzE5bGRIbHRiMnh2WjNrdWFuTnZiaWNzSUdaMWJtTjBhVzl1S0dSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlIQnliM1pwYm1ObGN5QTlJR1JoZEdFN1hISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzAxdmRXNTBaV1FvS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY0hKdmRtbHVZMlZ6T2lCd2NtOTJhVzVqWlhOY2NseHVJQ0FnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TG1KcGJtUW9kR2hwY3lrcE95QXZMeUJsYm1RZ1oyVjBTbE5QVGx4eVhHNGdJSDBzWEhKY2JseHlYRzRnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnS0Z4eVhHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW5CaGJtVnNjMXdpUGx4eVhHNGdJQ0FnSUNBZ0lEeDFiQ0JqYkdGemMwNWhiV1U5WENKd1lXNWxiSE5mWDJOdmJuUmhhVzVsY2x3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTjBZWFJsTG5CeWIzWnBibU5sY3k1dFlYQW9ablZ1WTNScGIyNG9jSEp2ZG1sdVkyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cElHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZhWFJsYlZ3aUlHbDBaVzFKUkQxN2NISnZkbWx1WTJVdWJtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncExuSmxjR3hoWTJVb0x5QXZaeXdnSnljcGZUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdnelBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0d2NtOTJhVzVqWlM1dVlXMWxmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyZ3pQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5c2FUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBJQzh2SUdWdVpDQndjbTkyYVc1alpYTmNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQThMM1ZzUGx4eVhHNGdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ2xjY2x4dUlDQjlYSEpjYmx4eVhHNTlLVHRjY2x4dVhISmNibHh5WEc0dktseHlYRzRnS2lCTllYQmNjbHh1SUNvdlhISmNia3d1YldGd1ltOTRMbUZqWTJWemMxUnZhMlZ1SUQwZ0ozQnJMbVY1U2pGSmFtOXBXVmM1ZW1GWGRHaEphWGRwV1ZOSk5rbHFVWHBTUjBsNFpVVnJhV1pSTGpkUGRtMTVRbUpZZDNkME9WRjRhbXhvT1ZGa00zY25PMXh5WEc1Y2NseHVkbUZ5SUUxaGNDQTlJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpLSHRjY2x4dVhISmNiaUFnWjJWMFNXNXBkR2xoYkZOMFlYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUd4aGVXVnljem9nSnljc1hISmNiaUFnSUNCOVhISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ1kzSmxZWFJsVFdGd09pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQjJZWElnYldGd0lEMGdUQzV0WVhCaWIzZ3ViV0Z3S0dWc1pXMWxiblFzSUNkdFlYQmliM2d1YzNSeVpXVjBjeWNzSUh0Y2NseHVJQ0FnSUNBZ2VtOXZiVU52Ym5SeWIydzZJR1poYkhObExGeHlYRzRnSUNBZ0lDQmhkSFJ5YVdKMWRHbHZia052Ym5SeWIydzZJR1poYkhObFhISmNiaUFnSUNCOUtUdGNjbHh1SUNBZ0lHMWhjQzV6WTNKdmJHeFhhR1ZsYkZwdmIyMHVaR2x6WVdKc1pTZ3BPMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JXRndPMXh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJSE5sZEhWd1RXRndPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhSb2FYTXViV0Z3TG5ObGRGWnBaWGNvVzNSb2FYTXVjSEp2Y0hNdWJHRjBMQ0IwYUdsekxuQnliM0J6TG14dmJsMHNJSFJvYVhNdWNISnZjSE11ZW05dmJTazdYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdZM0psWVhSbFRHRjVaWEp6T2lCbWRXNWpkR2x2YmlncElIdGNjbHh1WEhKY2JpQWdJQ0J1WlhjZ1RDNURiMjUwY205c0xscHZiMjBvZTNCdmMybDBhVzl1T2lBblltOTBkRzl0Y21sbmFIUW5JSDBwTG1Ga1pGUnZLSFJvYVhNdWJXRndLVHRjY2x4dVhISmNiaUFnSUNCMllYSWdZM0psWkdsMGN5QTlJRXd1WTI5dWRISnZiQzVoZEhSeWFXSjFkR2x2YmlncExtRmtaRlJ2S0hSb2FYTXViV0Z3S1R0Y2NseHVJQ0FnSUdOeVpXUnBkSE11WVdSa1FYUjBjbWxpZFhScGIyNG9YQ0xDcVNBOFlTQm9jbVZtUFNkb2RIUndjem92TDNkM2R5NXRZWEJpYjNndVkyOXRMMjFoY0MxbVpXVmtZbUZqYXk4blBrMWhjR0p2ZUR3dllUNGd3cWtnUEdFZ2FISmxaajBuYUhSMGNEb3ZMM2QzZHk1dmNHVnVjM1J5WldWMGJXRndMbTl5Wnk5amIzQjVjbWxuYUhRblBrOXdaVzVUZEhKbFpYUk5ZWEFnWTI5dWRISnBZblYwYjNKelBDOWhQbHdpS1R0Y2NseHVYSEpjYmlBZ0lDQjJZWElnYlhsTVlYbGxjaUE5SUV3dWJXRndZbTk0TG1abFlYUjFjbVZNWVhsbGNpZ3BMbUZrWkZSdktIUm9hWE11YldGd0tUdGNjbHh1WEhKY2JseHlYRzRnSUNBZ2RtRnlJSFJvYVhOTllYQWdQU0IwYUdsekxtMWhjRnh5WEc0Z0lDQWdkbUZ5SUhSb2FYTkVZWFJoTzF4eVhHNWNjbHh1SUNBZ0lDUXVaMlYwU2xOUFRpZ25ZWE56WlhSekwyUmhkR0V2WTJocGJtRmZjSEp2ZG1sdVkyVnpYM0J2YkhsbmIyNHVhbk52Ymljc0lHWjFibU4wYVc5dUtHUmhkR0VwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJRzE1VEdGNVpYSXVjMlYwUjJWdlNsTlBUaWhrWVhSaEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUcxNVRHRjVaWEl1WldGamFFeGhlV1Z5S0daMWJtTjBhVzl1S0d4aGVXVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHRjVaWEl1YjI0b0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0b1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNacGJtTmxUbUZ0WlNBOUlDUW9kR2hwY3lsYk1GMHVabVZoZEhWeVpTNXdjbTl3WlhKMGFXVnpMazVCVFVVdWRHOU1iM2RsY2tOaGMyVW9LUzV5WlhCc1lXTmxLQzhnTDJjc0lDY25LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2Wnlod2NtOTJhVzVqWlU1aGJXVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLVHNnTHk4Z1pXNWtJR3hoZVdWeUlHTnNhV05ySUdWMlpXNTBYSEpjYmlBZ0lDQWdJSDBwT3lBdkx5QmxibVFnWldGamFFeGhlV1Z5WEhKY2JseHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhrWVhSaEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUhSb2FYTkVZWFJoSUQwZ1pHRjBZVHRjY2x4dVhISmNiaUFnSUNCOUtUc2dMeThnWlc1a0lHZGxkRXBUVDA1Y2NseHVYSEpjYmx4eVhHNGdJSDBzWEhKY2JseHlYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwT2lCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG1OeVpXRjBaVTFoY0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRndJRDBnZEdocGN5NXdjbTl3Y3k1amNtVmhkR1ZOWVhBb2RHaHBjeTVuWlhSRVQwMU9iMlJsS0NrcE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGNDQTlJSFJvYVhNdVkzSmxZWFJsVFdGd0tIUm9hWE11WjJWMFJFOU5UbTlrWlNncEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYUdsekxuTmxkSFZ3VFdGd0tDazdYSEpjYmlBZ0lDQjBhR2x6TG1OeVpXRjBaVXhoZVdWeWN5Z3BPMXh5WEc1Y2NseHVJQ0I5TEZ4eVhHNWNjbHh1SUNCeVpXNWtaWEk2SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNoY2NseHVJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5SjIxaGNDYytQQzlrYVhZK1hISmNiaUFnSUNBcFhISmNiaUFnZlZ4eVhHNWNjbHh1ZlNrN1hISmNibHh5WEc1Y2NseHVMeXBjY2x4dUlDb2dRMjl1ZEdGcGJtVnlYSEpjYmlBcUwxeHlYRzUyWVhJZ1EyOXVkR0ZwYm1WeUlEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh5WEc0Z0lISmxibVJsY2pvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z0tGeHlYRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltTnZiblJoYVc1bGNsd2lQbHh5WEc0Z0lDQWdJQ0FnSUR4TllYQWdiR0YwUFZ3aU16VmNJaUJzYjI0OVhDSXhNREJjSWlCNmIyOXRQVndpTkZ3aUx6NWNjbHh1SUNBZ0lDQWdJQ0E4VUdGdVpXeHpJQzgrWEhKY2JpQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdLVnh5WEc0Z0lIMWNjbHh1ZlNrN1hISmNibHh5WEc1Y2NseHVMeThnVW1WdVpHVnlJSFJvWlNCU1pXRmpkQ0JqYjIxd2IyNWxiblJjY2x4dVVtVmhZM1F1Y21WdVpHVnlLRnh5WEc0Z0lEeERiMjUwWVdsdVpYSWdMejRzWEhKY2JpQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyMXZkVzUwSnlsY2NseHVLVnh5WEc1Y2NseHVmU0F2THlCbGJtUWdiVzlrZFd4bElHVjRjRzl5ZEZ4eVhHNTlLU2dwSUM4dklHVnVaQ0JoYm05dWVXMXZkWE1nZDNKaGNIQmxjbHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1WEhKY2JpSmRmUT09Il19
