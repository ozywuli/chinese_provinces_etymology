(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./map.js');

app();


},{"./map.js":2}],2:[function(require,module,exports){
"use strict";

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: "Panels",

      getInitialState: function getInitialState() {
        return {
          provinces: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.getJSON('assets/data/china_provinces_etymology.json', (function (data) {
          var provinces = data;

          console.log(1);

          if (this.isMounted()) {
            this.setState({
              provinces: provinces
            });
          }
        }).bind(this)); // end getJSON
      },

      render: function render() {
        return React.createElement(
          "div",
          { className: "panels" },
          React.createElement(
            "ul",
            { className: "panels__container" },
            this.state.provinces.map(function (province) {
              return React.createElement(
                "li",
                { className: "panels__item", itemID: province.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  "h3",
                  null,
                  province.name
                )
              );
            }) // end provinces

          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1Ijoib3p5d29vbGVlIiwiYSI6ImNpaDcwdTJ2bzBld2p1bWtpeG1lYTltaGcifQ.Ocpge8p64YCB1utqFOYtog';

    var Map = React.createClass({
      displayName: "Map",

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'ozywoolee.87aae22b', {
          zoomControl: false,
          attributionControl: false
        });
        map.scrollWheelZoom.disable();

        var credits = L.control.attribution().addTo(map);
        credits.addAttribution("© <a href='https://www.mapbox.com/map-feedback/'>Mapbox</a> © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap contributors</a>");
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);

        var thisMap = this.map;

        $.getJSON('assets/data/china_provinces_polygon.json', function (data) {

          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {

            layer.on('click', function (e) {

              var provinceName = $(this)[0].feature.properties.NAME.toLowerCase().replace(/ /g, '');
              console.log(provinceName);
            }); // end layer click event
          }); // end eachLayer

          // Grab labels for each province form json and center them in the province polygon derived from coordinates
          L.geoJson(data, {
            onEachFeature: function onEachFeature(feature, layer) {
              var label = L.marker(layer.getBounds().getCenter(), {
                icon: L.divIcon({
                  className: 'label label-' + layer.feature.properties.NAME.toLowerCase().replace(/ /g, ''),
                  html: layer.feature.properties.NAME,
                  iconSize: [100, 40]
                })
              }).addTo(thisMap);
            }
          });

          // Hide province labels when zoomed out too far
          thisMap.on('zoomend', function () {
            console.log(thisMap.getZoom());
            if (thisMap.getZoom() <= 4) {
              $('.label').css('display', 'none');
            }
            if (thisMap.getZoom() === 5) {
              $('.label').css('display', 'block');
            }
          });
        }); // end getJSON
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      render: function render() {
        return React.createElement("div", { className: "map" });
      }

    });

    /*
     * Container
     */
    var Container = React.createClass({
      displayName: "Container",

      render: function render() {
        return React.createElement(
          "div",
          { className: "container" },
          React.createElement(Map, { lat: "35", lon: "105", zoom: "5" }),
          React.createElement(Panels, null)
        );
      }
    });

    // Render the React component
    React.render(React.createElement(Container, null), document.getElementById('mount'));
  }; // end module export
})(); // end anonymous wrapper


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNwZVxcc3JjXFxhc3NldHNcXGpzXFxhcHAuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNwZVxcc3JjXFxhc3NldHNcXGpzXFxtYXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxZQUFZLENBQUM7O0FBRWIsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUU5QixHQUFHLEVBQUUsQ0FBQztBQUNOOzs7QUNMQSxZQUFZLENBQUM7O0FBRWIsQ0FBQyxZQUFZOztBQUViLEVBQUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxZQUFZO0FBQy9CO0FBQ0E7QUFDQTs7SUFFSSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ25DLE1BQU0sV0FBVyxFQUFFLFFBQVE7O01BRXJCLGVBQWUsRUFBRSxTQUFTLGVBQWUsR0FBRztRQUMxQyxPQUFPO1VBQ0wsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO0FBQ1YsT0FBTzs7TUFFRCxpQkFBaUIsRUFBRSxTQUFTLGlCQUFpQixHQUFHO1FBQzlDLENBQUMsQ0FBQyxPQUFPLENBQUMsNENBQTRDLEVBQUUsQ0FBQyxVQUFVLElBQUksRUFBRTtBQUNqRixVQUFVLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQzs7QUFFL0IsVUFBVSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztVQUVmLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUM7Y0FDWixTQUFTLEVBQUUsU0FBUzthQUNyQixDQUFDLENBQUM7V0FDSjtTQUNGLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdkIsT0FBTzs7TUFFRCxNQUFNLEVBQUUsU0FBUyxNQUFNLEdB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LENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUN0RixDQUFDO0NBQ0gsR0FBRyxDQUFDLENBQUMsd0JBQXdCO0FBQzlCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFwcCA9IHJlcXVpcmUoJy4vbWFwLmpzJyk7XG5cbmFwcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTTZMM2RoYlhBdmQzZDNMMnhoWWk5amNHVXZjM0pqTDJGemMyVjBjeTlxY3k5aGNIQXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeEpRVUZKTEVkQlFVY3NSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03TzBGQlJ6bENMRWRCUVVjc1JVRkJSU3hEUVVGRElpd2labWxzWlNJNklrTTZMM2RoYlhBdmQzZDNMMnhoWWk5amNHVXZjM0pqTDJGemMyVjBjeTlxY3k5aGNIQXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKMllYSWdZWEJ3SUQwZ2NtVnhkV2x5WlNnbkxpOXRZWEF1YW5NbktUdGNjbHh1WEhKY2JseHlYRzVoY0hBb0tUc2lYWDA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAvKlxyXG4gICAgICogUGFuZWxzXHJcbiAgICAgKi9cbiAgICB2YXIgUGFuZWxzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgICAgZGlzcGxheU5hbWU6IFwiUGFuZWxzXCIsXG5cbiAgICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByb3ZpbmNlczogW11cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgJC5nZXRKU09OKCdhc3NldHMvZGF0YS9jaGluYV9wcm92aW5jZXNfZXR5bW9sb2d5Lmpzb24nLCAoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICB2YXIgcHJvdmluY2VzID0gZGF0YTtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKDEpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuaXNNb3VudGVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBwcm92aW5jZXM6IHByb3ZpbmNlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5iaW5kKHRoaXMpKTsgLy8gZW5kIGdldEpTT05cbiAgICAgIH0sXG5cbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInBhbmVsc1wiIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInBhbmVsc19fY29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucHJvdmluY2VzLm1hcChmdW5jdGlvbiAocHJvdmluY2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBcInBhbmVsc19faXRlbVwiLCBpdGVtSUQ6IHByb3ZpbmNlLm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICcnKSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICBcImgzXCIsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgcHJvdmluY2UubmFtZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pIC8vIGVuZCBwcm92aW5jZXNcblxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgLypcclxuICAgICAqIE1hcFxyXG4gICAgICovXG4gICAgTC5tYXBib3guYWNjZXNzVG9rZW4gPSAncGsuZXlKMUlqb2liM3A1ZDI5dmJHVmxJaXdpWVNJNkltTnBhRGN3ZFRKMmJ6QmxkMnAxYld0cGVHMWxZVGx0YUdjaWZRLk9jcGdlOHA2NFlDQjF1dHFGT1l0b2cnO1xuXG4gICAgdmFyIE1hcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiBcIk1hcFwiLFxuXG4gICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsYXllcnM6ICcnXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICBjcmVhdGVNYXA6IGZ1bmN0aW9uIGNyZWF0ZU1hcChlbGVtZW50KSB7XG4gICAgICAgIHZhciBtYXAgPSBMLm1hcGJveC5tYXAoZWxlbWVudCwgJ296eXdvb2xlZS44N2FhZTIyYicsIHtcbiAgICAgICAgICB6b29tQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgbWFwLnNjcm9sbFdoZWVsWm9vbS5kaXNhYmxlKCk7XG5cbiAgICAgICAgdmFyIGNyZWRpdHMgPSBMLmNvbnRyb2wuYXR0cmlidXRpb24oKS5hZGRUbyhtYXApO1xuICAgICAgICBjcmVkaXRzLmFkZEF0dHJpYnV0aW9uKFwiwqkgPGEgaHJlZj0naHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXAtZmVlZGJhY2svJz5NYXBib3g8L2E+IMKpIDxhIGhyZWY9J2h0dHA6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvY29weXJpZ2h0Jz5PcGVuU3RyZWV0TWFwIGNvbnRyaWJ1dG9yczwvYT5cIik7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgICB9LFxuXG4gICAgICBzZXR1cE1hcDogZnVuY3Rpb24gc2V0dXBNYXAoKSB7XG4gICAgICAgIHRoaXMubWFwLnNldFZpZXcoW3RoaXMucHJvcHMubGF0LCB0aGlzLnByb3BzLmxvbl0sIHRoaXMucHJvcHMuem9vbSk7XG4gICAgICB9LFxuXG4gICAgICBjcmVhdGVMYXllcnM6IGZ1bmN0aW9uIGNyZWF0ZUxheWVycygpIHtcblxuICAgICAgICB2YXIgbXlMYXllciA9IEwubWFwYm94LmZlYXR1cmVMYXllcigpLmFkZFRvKHRoaXMubWFwKTtcblxuICAgICAgICB2YXIgdGhpc01hcCA9IHRoaXMubWFwO1xuXG4gICAgICAgICQuZ2V0SlNPTignYXNzZXRzL2RhdGEvY2hpbmFfcHJvdmluY2VzX3BvbHlnb24uanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICAgICAgICBteUxheWVyLnNldEdlb0pTT04oZGF0YSk7XG5cbiAgICAgICAgICBteUxheWVyLmVhY2hMYXllcihmdW5jdGlvbiAobGF5ZXIpIHtcblxuICAgICAgICAgICAgbGF5ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICB2YXIgcHJvdmluY2VOYW1lID0gJCh0aGlzKVswXS5mZWF0dXJlLnByb3BlcnRpZXMuTkFNRS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgJycpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwcm92aW5jZU5hbWUpO1xuICAgICAgICAgICAgfSk7IC8vIGVuZCBsYXllciBjbGljayBldmVudFxuICAgICAgICAgIH0pOyAvLyBlbmQgZWFjaExheWVyXG5cbiAgICAgICAgICAvLyBHcmFiIGxhYmVscyBmb3IgZWFjaCBwcm92aW5jZSBmb3JtIGpzb24gYW5kIGNlbnRlciB0aGVtIGluIHRoZSBwcm92aW5jZSBwb2x5Z29uIGRlcml2ZWQgZnJvbSBjb29yZGluYXRlc1xuICAgICAgICAgIEwuZ2VvSnNvbihkYXRhLCB7XG4gICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBmdW5jdGlvbiBvbkVhY2hGZWF0dXJlKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICAgIHZhciBsYWJlbCA9IEwubWFya2VyKGxheWVyLmdldEJvdW5kcygpLmdldENlbnRlcigpLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogTC5kaXZJY29uKHtcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2xhYmVsIGxhYmVsLScgKyBsYXllci5mZWF0dXJlLnByb3BlcnRpZXMuTkFNRS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgJycpLFxuICAgICAgICAgICAgICAgICAgaHRtbDogbGF5ZXIuZmVhdHVyZS5wcm9wZXJ0aWVzLk5BTUUsXG4gICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwMCwgNDBdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSkuYWRkVG8odGhpc01hcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBIaWRlIHByb3ZpbmNlIGxhYmVscyB3aGVuIHpvb21lZCBvdXQgdG9vIGZhclxuICAgICAgICAgIHRoaXNNYXAub24oJ3pvb21lbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzTWFwLmdldFpvb20oKSk7XG4gICAgICAgICAgICBpZiAodGhpc01hcC5nZXRab29tKCkgPD0gNCkge1xuICAgICAgICAgICAgICAkKCcubGFiZWwnKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXNNYXAuZ2V0Wm9vbSgpID09PSA1KSB7XG4gICAgICAgICAgICAgICQoJy5sYWJlbCcpLmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgLy8gZW5kIGdldEpTT05cbiAgICAgIH0sXG5cbiAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY3JlYXRlTWFwKSB7XG4gICAgICAgICAgdGhpcy5tYXAgPSB0aGlzLnByb3BzLmNyZWF0ZU1hcCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXAgPSB0aGlzLmNyZWF0ZU1hcCh0aGlzLmdldERPTU5vZGUoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldHVwTWFwKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlTGF5ZXJzKCk7XG4gICAgICB9LFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibWFwXCIgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8qXHJcbiAgICAgKiBDb250YWluZXJcclxuICAgICAqL1xuICAgIHZhciBDb250YWluZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICBkaXNwbGF5TmFtZTogXCJDb250YWluZXJcIixcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IFwiY29udGFpbmVyXCIgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1hcCwgeyBsYXQ6IFwiMzVcIiwgbG9uOiBcIjEwNVwiLCB6b29tOiBcIjVcIiB9KSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFBhbmVscywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFJlbmRlciB0aGUgUmVhY3QgY29tcG9uZW50XG4gICAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdW50JykpO1xuICB9OyAvLyBlbmQgbW9kdWxlIGV4cG9ydFxufSkoKTsgLy8gZW5kIGFub255bW91cyB3cmFwcGVyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqY0dVdmMzSmpMMkZ6YzJWMGN5OXFjeTl0WVhBdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4RFFVRkRMRmxCUVZjN08wRkJSVm9zVVVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4WlFVRlhPenM3T3p0QlFVczFRaXhSUVVGSkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPenM3UVVGRk4wSXNjVUpCUVdVc1JVRkJSU3d5UWtGQlZ6dEJRVU14UWl4bFFVRlBPMEZCUTB3c2JVSkJRVk1zUlVGQlJTeEZRVUZGTzFOQlEyUXNRMEZCUVR0UFFVTkdPenRCUVVWRUxIVkNRVUZwUWl4RlFVRkZMRFpDUVVGWE8wRkJRelZDTEZOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc05FTkJRVFJETEVWQlFVVXNRMEZCUVN4VlFVRlRMRWxCUVVrc1JVRkJSVHRCUVVOeVJTeGpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN08wRkJSWEpDTEdsQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVm1MR05CUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeEZRVUZGTzBGQlEzQkNMR2RDUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzBGQlExb3NkVUpCUVZNc1JVRkJSU3hUUVVGVE8yRkJRM0pDTEVOQlFVTXNRMEZCUVR0WFFVTklPMU5CUTBZc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMDlCUTJZN08wRkJSVVFzV1VGQlRTeEZRVUZGTEd0Q1FVRlhPMEZCUTJwQ0xHVkJRMFU3TzFsQlFVc3NVMEZCVXl4RlFVRkRMRkZCUVZFN1ZVRkRja0k3TzJOQlFVa3NVMEZCVXl4RlFVRkRMRzFDUVVGdFFqdFpRVVUzUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRNVU1zY1VKQlEwVTdPMnRDUVVGSkxGTkJRVk1zUlVGQlF5eGpRVUZqTEVWQlFVTXNUVUZCVFN4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zUVVGQlF6dG5Ra0ZEYWtZN096dHJRa0ZEUnl4UlFVRlJMRU5CUVVNc1NVRkJTVHRwUWtGRFdEdGxRVU5HTEVOQlEwNDdZVUZEUml4RFFVRkRPenRYUVVWRU8xTkJRMFFzUTBGRFVEdFBRVU5HT3p0TFFVVkdMRU5CUVVNc1EwRkJRenM3T3pzN1FVRk5TQ3hMUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl3NFJrRkJPRVlzUTBGQlF6czdRVUZGZEVnc1VVRkJTU3hIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXpzN08wRkJSVEZDTEhGQ1FVRmxMRVZCUVVVc01rSkJRVmM3UVVGRE1VSXNaVUZCVHp0QlFVTk1MR2RDUVVGTkxFVkJRVVVzUlVGQlJUdFRRVU5ZTEVOQlFVRTdUMEZEUmpzN1FVRkZSQ3hsUVVGVExFVkJRVVVzYlVKQlFWTXNUMEZCVHl4RlFVRkZPMEZCUXpOQ0xGbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJTeHZRa0ZCYjBJc1JVRkJSVHRCUVVOd1JDeHhRa0ZCVnl4RlFVRkZMRXRCUVVzN1FVRkRiRUlzTkVKQlFXdENMRVZCUVVVc1MwRkJTenRUUVVNeFFpeERRVUZETEVOQlFVTTdRVUZEU0N4WFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZET3p0QlFVVTVRaXhaUVVGSkxFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTnFSQ3hsUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEN0SlFVRXJTU3hEUVVGRExFTkJRVU03UVVGRGVFc3NaVUZCVHl4SFFVRkhMRU5CUVVNN1QwRkRXanM3UVVGRlJDeGpRVUZSTEVWQlFVVXNiMEpCUVZjN1FVRkRia0lzV1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VDBGRGNrVTdPMEZCUlVRc2EwSkJRVmtzUlVGQlJTeDNRa0ZCVnpzN1FVRkZka0lzV1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96dEJRVVYwUkN4WlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZET3p0QlFVZDJRaXhUUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETERCRFFVRXdReXhGUVVGRkxGVkJRVk1zU1VGQlNTeEZRVUZGT3p0QlFVVnVSU3hwUWtGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmVrSXNhVUpCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlV5eExRVUZMTEVWQlFVVTdPMEZCUldoRExHbENRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVExFTkJRVU1zUlVGQlJUczdRVUZGTlVJc2EwSkJRVWtzV1VGQldTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM1JHTEhGQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzJGQlJUTkNMRU5CUVVNc1EwRkJRenRYUVVWS0xFTkJRVU1zUTBGQlF6czdPMEZCU1Vnc1YwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEWkN4NVFrRkJZU3hGUVVGRkxIVkNRVUZUTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkRkRU1zYTBKQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRk5CUVZNc1JVRkJSU3hGUVVGRk8wRkJRMnhFTEc5Q1FVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF6dEJRVU5rTERKQ1FVRlRMRVZCUVVVc1kwRkJZeXhIUVVGSExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJRenRCUVVONlJpeHpRa0ZCU1N4RlFVRkZMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVazdRVUZEYmtNc01FSkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRU5CUVVNN2FVSkJRM0JDTEVOQlFVTTdaVUZEU0N4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzJGQlEyNUNPMWRCUTBZc1EwRkJReXhEUVVGRE96czdRVUZKU0N4cFFrRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVWQlFVVXNXVUZCVnp0QlFVTXZRaXh0UWtGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU12UWl4blFrRkJTeXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkhPMEZCUXpWQ0xHVkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzJGQlEzQkRPMEZCUTBRc1owSkJRVXNzVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1JVRkJSenRCUVVNM1FpeGxRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTnlRenRYUVVOR0xFTkJRVU1zUTBGQlFUdFRRVWRJTEVOQlFVTXNRMEZCUXp0UFFVZEtPenRCUVVWRUxIVkNRVUZwUWl4RlFVRkZMRFpDUVVGWE8wRkJRelZDTEZsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVVU3UVVGRGRFSXNZMEZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU4wUkN4TlFVRk5PMEZCUTBnc1kwRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEyaEVPenRCUVVWRUxGbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0QlFVTm9RaXhaUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdUMEZGY2tJN08wRkJSVVFzV1VGQlRTeEZRVUZGTEd0Q1FVRlhPMEZCUTJwQ0xHVkJRMFVzTmtKQlFVc3NVMEZCVXl4RlFVRkRMRXRCUVVzc1IwRkJUeXhEUVVNMVFqdFBRVU5HT3p0TFFVVkdMRU5CUVVNc1EwRkJRenM3T3pzN1FVRk5TQ3hSUVVGSkxGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPenM3UVVGRGFFTXNXVUZCVFN4RlFVRkZMR3RDUVVGWE8wRkJRMnBDTEdWQlEwVTdPMWxCUVVzc1UwRkJVeXhGUVVGRExGZEJRVmM3VlVGRGVFSXNiMEpCUVVNc1IwRkJSeXhKUVVGRExFZEJRVWNzUlVGQlF5eEpRVUZKTEVWQlFVTXNSMEZCUnl4RlFVRkRMRXRCUVVzc1JVRkJReXhKUVVGSkxFVkJRVU1zUjBGQlJ5eEhRVUZGTzFWQlEyeERMRzlDUVVGRExFMUJRVTBzVDBGQlJ6dFRRVU5PTEVOQlExQTdUMEZEUmp0TFFVTkdMRU5CUVVNc1EwRkJRenM3TzBGQlNVZ3NVMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkRWaXh2UWtGQlF5eFRRVUZUTEU5QlFVY3NSVUZEWWl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVU5xUXl4RFFVRkJPMGRCUlVFc1EwRkJRVHREUVVOQkxFTkJRVUVzUlVGQlJ5eERRVUZCSWl3aVptbHNaU0k2SWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqY0dVdmMzSmpMMkZ6YzJWMGN5OXFjeTl0WVhBdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRvS1NCN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzVjY2x4dUx5cGNjbHh1SUNvZ1VHRnVaV3h6WEhKY2JpQXFMMXh5WEc1MllYSWdVR0Z1Wld4eklEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh5WEc1Y2NseHVJQ0JuWlhSSmJtbDBhV0ZzVTNSaGRHVTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnY0hKdmRtbHVZMlZ6T2lCYlhTeGNjbHh1SUNBZ0lIMWNjbHh1SUNCOUxGeHlYRzVjY2x4dUlDQmpiMjF3YjI1bGJuUkVhV1JOYjNWdWREb2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0FrTG1kbGRFcFRUMDRvSjJGemMyVjBjeTlrWVhSaEwyTm9hVzVoWDNCeWIzWnBibU5sYzE5bGRIbHRiMnh2WjNrdWFuTnZiaWNzSUdaMWJtTjBhVzl1S0dSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnZG1GeUlIQnliM1pwYm1ObGN5QTlJR1JoZEdFN1hISmNibHh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlneEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1selRXOTFiblJsWkNncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdYSEpjYmlBZ0lDQWdJQ0FnSUNCd2NtOTJhVzVqWlhNNklIQnliM1pwYm1ObGMxeHlYRzRnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwdVltbHVaQ2gwYUdsektTazdJQzh2SUdWdVpDQm5aWFJLVTA5T1hISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ2NtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlBb1hISmNiaUFnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFZ3aWNHRnVaV3h6WENJK1hISmNiaUFnSUNBZ0lDQWdQSFZzSUdOc1lYTnpUbUZ0WlQxY0luQmhibVZzYzE5ZlkyOXVkR0ZwYm1WeVhDSStYSEpjYmlBZ0lDQWdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdVdWNISnZkbWx1WTJWekxtMWhjQ2htZFc1amRHbHZiaWh3Y205MmFXNWpaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTlwZEdWdFhDSWdhWFJsYlVsRVBYdHdjbTkyYVc1alpTNXVZVzFsTG5SdlRHOTNaWEpEWVhObEtDa3VjbVZ3YkdGalpTZ3ZJQzluTENBbkp5bDlQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFETStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzQnliM1pwYm1ObExtNWhiV1Y5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZhRE0rWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyeHBQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2tnTHk4Z1pXNWtJSEJ5YjNacGJtTmxjMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRHd2ZFd3K1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnS1Z4eVhHNGdJSDFjY2x4dVhISmNibjBwTzF4eVhHNWNjbHh1WEhKY2JpOHFYSEpjYmlBcUlFMWhjRnh5WEc0Z0tpOWNjbHh1VEM1dFlYQmliM2d1WVdOalpYTnpWRzlyWlc0Z1BTQW5jR3N1WlhsS01VbHFiMmxpTTNBMVpESTVkbUpIVm14SmFYZHBXVk5KTmtsdFRuQmhSR04zWkZSS01tSjZRbXhrTW5BeFlsZDBjR1ZITVd4WlZHeDBZVWRqYVdaUkxrOWpjR2RsT0hBMk5GbERRakYxZEhGR1QxbDBiMmNuTzF4eVhHNWNjbHh1ZG1GeUlFMWhjQ0E5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2NseHVYSEpjYmlBZ1oyVjBTVzVwZEdsaGJGTjBZWFJsT2lCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCN1hISmNiaUFnSUNBZ0lHeGhlV1Z5Y3pvZ0p5Y3NYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdZM0psWVhSbFRXRndPaUJtZFc1amRHbHZiaWhsYkdWdFpXNTBLU0I3WEhKY2JpQWdJQ0IyWVhJZ2JXRndJRDBnVEM1dFlYQmliM2d1YldGd0tHVnNaVzFsYm5Rc0lDZHZlbmwzYjI5c1pXVXVPRGRoWVdVeU1tSW5MQ0I3WEhKY2JpQWdJQ0FnSUhwdmIyMURiMjUwY205c09pQm1ZV3h6WlN4Y2NseHVJQ0FnSUNBZ1lYUjBjbWxpZFhScGIyNURiMjUwY205c09pQm1ZV3h6WlZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnSUNCdFlYQXVjMk55YjJ4c1YyaGxaV3hhYjI5dExtUnBjMkZpYkdVb0tUdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ1kzSmxaR2wwY3lBOUlFd3VZMjl1ZEhKdmJDNWhkSFJ5YVdKMWRHbHZiaWdwTG1Ga1pGUnZLRzFoY0NrN1hISmNiaUFnSUNCamNtVmthWFJ6TG1Ga1pFRjBkSEpwWW5WMGFXOXVLRndpd3FrZ1BHRWdhSEpsWmowbmFIUjBjSE02THk5M2QzY3ViV0Z3WW05NExtTnZiUzl0WVhBdFptVmxaR0poWTJzdkp6NU5ZWEJpYjNnOEwyRStJTUtwSUR4aElHaHlaV1k5SjJoMGRIQTZMeTkzZDNjdWIzQmxibk4wY21WbGRHMWhjQzV2Y21jdlkyOXdlWEpwWjJoMEp6NVBjR1Z1VTNSeVpXVjBUV0Z3SUdOdmJuUnlhV0oxZEc5eWN6d3ZZVDVjSWlrN1hISmNiaUFnSUNCeVpYUjFjbTRnYldGd08xeHlYRzRnSUgwc1hISmNibHh5WEc0Z0lITmxkSFZ3VFdGd09pQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJSFJvYVhNdWJXRndMbk5sZEZacFpYY29XM1JvYVhNdWNISnZjSE11YkdGMExDQjBhR2x6TG5CeWIzQnpMbXh2Ymwwc0lIUm9hWE11Y0hKdmNITXVlbTl2YlNrN1hISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ1kzSmxZWFJsVEdGNVpYSnpPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVYSEpjYmlBZ0lDQjJZWElnYlhsTVlYbGxjaUE5SUV3dWJXRndZbTk0TG1abFlYUjFjbVZNWVhsbGNpZ3BMbUZrWkZSdktIUm9hWE11YldGd0tUdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2RHaHBjMDFoY0NBOUlIUm9hWE11YldGd08xeHlYRzVjY2x4dVhISmNiaUFnSUNBa0xtZGxkRXBUVDA0b0oyRnpjMlYwY3k5a1lYUmhMMk5vYVc1aFgzQnliM1pwYm1ObGMxOXdiMng1WjI5dUxtcHpiMjRuTENCbWRXNWpkR2x2Ymloa1lYUmhLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQnRlVXhoZVdWeUxuTmxkRWRsYjBwVFQwNG9aR0YwWVNrN1hISmNibHh5WEc0Z0lDQWdJQ0J0ZVV4aGVXVnlMbVZoWTJoTVlYbGxjaWhtZFc1amRHbHZiaWhzWVhsbGNpa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNZWGxsY2k1dmJpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpaGxLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlIQnliM1pwYm1ObFRtRnRaU0E5SUNRb2RHaHBjeWxiTUYwdVptVmhkSFZ5WlM1d2NtOXdaWEowYVdWekxrNUJUVVV1ZEc5TWIzZGxja05oYzJVb0tTNXlaWEJzWVdObEtDOGdMMmNzSUNjbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktIQnliM1pwYm1ObFRtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSDBwT3lBdkx5QmxibVFnYkdGNVpYSWdZMnhwWTJzZ1pYWmxiblJjY2x4dVhISmNiaUFnSUNBZ0lIMHBPeUF2THlCbGJtUWdaV0ZqYUV4aGVXVnlYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdMeThnUjNKaFlpQnNZV0psYkhNZ1ptOXlJR1ZoWTJnZ2NISnZkbWx1WTJVZ1ptOXliU0JxYzI5dUlHRnVaQ0JqWlc1MFpYSWdkR2hsYlNCcGJpQjBhR1VnY0hKdmRtbHVZMlVnY0c5c2VXZHZiaUJrWlhKcGRtVmtJR1p5YjIwZ1kyOXZjbVJwYm1GMFpYTmNjbHh1SUNBZ0lDQWdUQzVuWlc5S2MyOXVLR1JoZEdFc0lIdGNjbHh1SUNBZ0lDQWdJQ0J2YmtWaFkyaEdaV0YwZFhKbE9pQm1kVzVqZEdsdmJpaG1aV0YwZFhKbExDQnNZWGxsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHeGhZbVZzSUQwZ1RDNXRZWEpyWlhJb2JHRjVaWEl1WjJWMFFtOTFibVJ6S0NrdVoyVjBRMlZ1ZEdWeUtDa3NJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV052YmpvZ1RDNWthWFpKWTI5dUtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTZJQ2RzWVdKbGJDQnNZV0psYkMwbklDc2diR0Y1WlhJdVptVmhkSFZ5WlM1d2NtOXdaWEowYVdWekxrNUJUVVV1ZEc5TWIzZGxja05oYzJVb0tTNXlaWEJzWVdObEtDOGdMMmNzSUNjbktTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9kRzFzT2lCc1lYbGxjaTVtWldGMGRYSmxMbkJ5YjNCbGNuUnBaWE11VGtGTlJTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1VTJsNlpUb2dXekV3TUN3Z05EQmRYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtTNWhaR1JVYnloMGFHbHpUV0Z3S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1WEhKY2JpQWdJQ0FnSUM4dklFaHBaR1VnY0hKdmRtbHVZMlVnYkdGaVpXeHpJSGRvWlc0Z2VtOXZiV1ZrSUc5MWRDQjBiMjhnWm1GeVhISmNiaUFnSUNBZ0lIUm9hWE5OWVhBdWIyNG9KM3B2YjIxbGJtUW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWgwYUdselRXRndMbWRsZEZwdmIyMG9LU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0IwYUdselRXRndMbWRsZEZwdmIyMG9LU0E4UFNBMElDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0pDZ25MbXhoWW1Wc0p5a3VZM056S0Nka2FYTndiR0Y1Snl3Z0oyNXZibVVuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDQjBhR2x6VFdGd0xtZGxkRnB2YjIwb0tTQTlQVDBnTlNBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNRb0p5NXNZV0psYkNjcExtTnpjeWduWkdsemNHeGhlU2NzSUNkaWJHOWpheWNwT3lCY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwWEhKY2JseHlYRzVjY2x4dUlDQWdJSDBwT3lBdkx5QmxibVFnWjJWMFNsTlBUbHh5WEc1Y2NseHVYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVZM0psWVhSbFRXRndLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhBZ1BTQjBhR2x6TG5CeWIzQnpMbU55WldGMFpVMWhjQ2gwYUdsekxtZGxkRVJQVFU1dlpHVW9LU2s3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV0Z3SUQwZ2RHaHBjeTVqY21WaGRHVk5ZWEFvZEdocGN5NW5aWFJFVDAxT2IyUmxLQ2twTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIUm9hWE11YzJWMGRYQk5ZWEFvS1R0Y2NseHVJQ0FnSUhSb2FYTXVZM0psWVhSbFRHRjVaWEp6S0NrN1hISmNibHh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJSEpsYm1SbGNqb2dablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdLRnh5WEc0Z0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMG5iV0Z3Sno0OEwyUnBkajVjY2x4dUlDQWdJQ2xjY2x4dUlDQjlYSEpjYmx4eVhHNTlLVHRjY2x4dVhISmNibHh5WEc0dktseHlYRzRnS2lCRGIyNTBZV2x1WlhKY2NseHVJQ292WEhKY2JuWmhjaUJEYjI1MFlXbHVaWElnUFNCU1pXRmpkQzVqY21WaGRHVkRiR0Z6Y3loN1hISmNiaUFnY21WdVpHVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUFvWEhKY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQVndpWTI5dWRHRnBibVZ5WENJK1hISmNiaUFnSUNBZ0lDQWdQRTFoY0NCc1lYUTlYQ0l6TlZ3aUlHeHZiajFjSWpFd05Wd2lJSHB2YjIwOVhDSTFYQ0l2UGx4eVhHNGdJQ0FnSUNBZ0lEeFFZVzVsYkhNZ0x6NWNjbHh1SUNBZ0lDQWdQQzlrYVhZK1hISmNiaUFnSUNBcFhISmNiaUFnZlZ4eVhHNTlLVHRjY2x4dVhISmNibHh5WEc0dkx5QlNaVzVrWlhJZ2RHaGxJRkpsWVdOMElHTnZiWEJ2Ym1WdWRGeHlYRzVTWldGamRDNXlaVzVrWlhJb1hISmNiaUFnUEVOdmJuUmhhVzVsY2lBdlBpeGNjbHh1SUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYlc5MWJuUW5LVnh5WEc0cFhISmNibHh5WEc1OUlDOHZJR1Z1WkNCdGIyUjFiR1VnWlhod2IzSjBYSEpjYm4wcEtDa2dMeThnWlc1a0lHRnViMjU1Ylc5MWN5QjNjbUZ3Y0dWeVhISmNibHh5WEc1Y2NseHVYSEpjYmx4eVhHNWNjbHh1SWwxOSJdfQ==
